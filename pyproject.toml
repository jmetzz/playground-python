[tool.poetry]
authors = ["Jean Metz"]
description = "My python playground, and sometimes sandbox"
license = "MIT"
name = "playground-python"
readme = "README.md"
version = "0.0.101"

[tool.poetry.dependencies]
python = "^3.12"
ipython = "^8.26.0"
pip = "^24.2.0"
numpy = "^2.0.1"
pandas = "^2.2.2"
pandas-profiling = "*"
environs = "^11.0.0"
Pillow = "^10.4.0"
scipy = "^1.14.0"
pydantic = "^1.7.3"
psycopg2-binary = "^2.9.9" # wrapper for postgresql. Requirement `brew install postgresql`
pyarrow = "^17.0.0"
typer = "^0.12.3"
joblib = "^1.4.2"
numexpr = "^2.9.0"
more-itertools = "^10.4.0"
statsmodels = "^0.14.2"
tbats = "^1.1.3"
scikit-learn = "^1.5.0"
pmdarima = "^2.0.4"
numba = "^0.60.0"


[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.13"
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-sugar = "^0.9.7"
ruff = "^0.6.1"
pre-commit = "^3.6.2"
pipdeptree = "^2.14.0"
pip-licenses = "^4.3.4"
prettytable = "^3.10.0"
pytest-xdist = "^3.5.0"
hypothesis = "^6.98.18"

[tool.poetry.group.notebook.dependencies]
jupyterlab = "^4.1"
tqdm = "^4.66.2"
tabulate = "^0.9.0"
ipykernel = "^6.29.2"
perfplot = "^0.10.2"

[tool.poetry.group.profiling.dependencies]
memory-profiler = "^0.61.0"
line-profiler = "^4.1.2"
psutil = "^5.9.8"
llvmlite = "0.43.0"
cython = "^3.0.8"
pyinstrument = "^4.6.2"
pyinstrument-flame = "^1.0.2"
snakeviz = "^2.2.0"
py-spy = "^0.3.14"


[tool.pytest.ini_options]
pythonpath = ["./src", "./tests"]
markers = [
    "unit: marks tests as unit tests",
    "functional: marks tests as functional tests",
    "nondeterministic: mark a test as non-deterministic",
]
addopts = "-n 8"

[tool.coverage.report]
omit = ["**/__init__.py", ".mypy_cache", ".reports", ".git", "**/tests/*"]
show_missing = true

[tool.coverage.run]
omit = ["*/__init__.py", ".mypy_cache", ".reports", ".git"]


[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py38"
extend-include = ["*.ipynb"]


[tool.ruff.lint]
select = [ # Enable
    "A", # flake8-builtins
    #    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    #    "BLE", # flake8-blind-except
    #    "C90", # mccabe
    #    "D", # pydocstyle
    "DOC",  # pydoclint
    "E",    # pycodestyle Error
    "F",    # Pyflakes
    "FURB", # refurb - A tool for refurbishing and modernizing Python codebases.
    #    "G", # flake8-logging-format
    "FAST", # FastAPI
    #    "FBT", # flake8-boolean-trap
    "I",   # isort
    "LOG", # flake8-logging
    #    "N", # pep8-naming
    #    "NPY", # NumPy-specific rules
    #    "PD", # pandas-vet
    #    "PERF", # Perflint
    "PIE", # flake8-pie
    #    "PL", # Pylint
    #    "PT", # flake8-pytest-style
    #    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    #    "RUF", # Ruff-specific rules
    #    "S", # flak8-bandit
    #    "SIM", # flake8-simplify
    #    "SLF", # flake8-self
    "UP",  # pyupgrade
    "T10", # flake8-debugger
    #    "T20", # flake8-print
    "TID", # flake8-tidy-imports
    #    "TRY", # tryceratops (TRY)
    #    "W", # pycodestyle Warning
]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF",     # flake8-self
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true
docstring-code-line-length = 92

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
